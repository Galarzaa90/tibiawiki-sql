[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
include = [
    "tibiawikisql*",
]

[project]
name = "tibiawikisql"
dynamic = ["version", "dependencies"]
authors = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
maintainers = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
license = { text = 'Apache 2.0' }
description = "Python script that generates a SQLite database from TibiaWiki articles"
requires-python = '>=3.11'
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: SQL",
    "Topic :: Database",
    "Topic :: Games/Entertainment :: Role-Playing",
    "Topic :: Internet",
    "Topic :: Utilities",
]

[project.urls]
"Homepage" = "https://github.com/Galarzaa90/tibiawiki-sql"

[project.optional-dependencies]
docs = [
    "Sphinx"
]

[project.scripts]
tibiawikisql = "tibiawikisql.__main__:cli"

[tool.setuptools.dynamic]
version = { attr = "tibiawikisql.__version__" }
dependencies = { file = ["requirements.txt"] }


[tool.ruff]
exclude = [
    "__pycache__",
    ".git/",
    "build/",
    ".idea/",
    "venv/",
    ".venv/",
    "docs/",
    "images/",
    "logs/",
    "tibiawikisql/__main__.py"
]


[tool.ruff.lint]
select = [
    "E", "W293", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
    "ANN", # flake8-annotations
    "DTZ", # flake8-datetimez
    "PL", # Pylint
    "FURB", # refurb
]
ignore = [
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "ARG005", # Unused lambda argument
    "D203", # 1 blank line required before class docstring
    "D213", # 1 blank line required before class docstring
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "ANN101", # Missing type annotation for {name} in method
    "ANN102", # Missing type annotation for {name} in classmethod
    "ANN202", # Missing return type annotation for private function {name}
    "ANN204", # Missing return type annotation for special method {name}
    "ANN401", # Dynamically typed expressions ({name}) are disallowed in `other`
    "PLR0913", # Too many arguments in function definition
    "PLR2004", #  Magic value used in comparison, consider replacing `{number}` with a constant variable
    "PLW2901", #  Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
]


[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["assert*"]


[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
